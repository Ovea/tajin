Deploiement:

    * war explose ou dossier avec ressources
    * servi par apache, mongosse ou autre, standard avec support SSI
    * tajin watchdog lance soit via servlet soit via programme pour regenerer config

Tajin

    * generation config & watch
        * tajin.json: file, classpath, url, ...
        * reloadable
        * generate tajin-client.json

    * mini framework evenementiel pour plomberie

    * gestion des ressources
        * plugin maven (build, watch)
        * tool (build, watch)
        * servlet filter (watch, unwatch, build at init)
        * supports:
            * sass, less => css
            * js, coffescript => js
            * minification + compilation (UglifyJs)
        * CF: http://code.google.com/p/wro4j/
        * descripteur de site website.json genere via config
        * enabled true/false pour inclure ou pas selon env par exemple

    * cli: cors
    * cli: storage
    * cli: crypto
    * cli: contribs

    * tools
        * script pour verifier l i18n rel localize vs bundles configures dans tajin.json

EventBus

    * bus client
    * support remote transparant
    * support event server-side & client transparent a travers comnetd ou autre
    * https://github.com/millermedeiros/js-signals/wiki/Examples

DynamicForm

    * https://github.com/thedersen/backbone.validation
    * https://github.com/powmedia/backbone-forms

Security

    * shiro integration
    * rememberme settings
    * anti-replay
    * owasp
    * CSRF (https://github.com/esheri3/OWASP-CSRFGuard)
    * Checking The Origin Header (https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)
    * https://nealpoole.com/blog/2010/11/preventing-csrf-attacks-with-ajax-and-http-headers/
    * https://www.owasp.org/images/0/08/OWASP_SCP_Quick_Reference_Guide_v2.pdf
